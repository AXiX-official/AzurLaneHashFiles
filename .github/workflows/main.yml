name: Update HashFiles Workflow

on:
  schedule:
    - cron: '0 * * * *'
  workflow_dispatch:

jobs:
  Update_HashFiles:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run downloader script
        id: downloader
        run: |
          output=$(python Scripts/downloader.py)
          echo "::set-output name=date::$output"
          if [[ "$output" == "No changes." ]]; then
            echo "::set-output name=skip_commit::true"
          fi

      - name: Add changes
        run: git add .

      - name: Use the date for commit
        if: steps.downloader.outputs.skip_commit != 'true'
        run: |
          echo "The date is ${{ steps.downloader.outputs.date }}"
          git commit -am "Update data for ${{ steps.downloader.outputs.date }}" || echo "No changes to commit"

      - name: Push changes
        if: steps.downloader.outputs.skip_commit != 'true'
        uses: ad-m/github-push-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Run release script
        if: steps.downloader.outputs.skip_commit != 'true'
        run: |
          python Scripts/release.py ${{ steps.downloader.outputs.date }}

      - name: Create and publish release
        if: steps.downloader.outputs.skip_commit != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.downloader.outputs.date }}
          release_name: Release ${{ steps.downloader.outputs.date }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: steps.downloader.outputs.skip_commit != 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Scripts/${{ steps.downloader.outputs.date }}.zip
          asset_name: ${{ steps.downloader.outputs.date }}.zip
          asset_content_type: application/zip